# -*- coding: utf-8 -*-
"""ML_CE008_Lab5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UqjQRo1bwX5V0W8EbpL8Ha1fbnm3e4xs
"""

from sklearn import preprocessing
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

#Predictor variables
Outlook = ['Rainy', 'Rainy', 'Overcast', 'Sunny', 'Sunny', 'Sunny','Overcast', 'Rainy', 'Rainy', 'Sunny', 'Rainy','Overcast', 'Overcast','Sunny']
Temperature = ['Hot', 'Hot', 'Hot', 'Mild', 'Cool', 'Cool', 'Cool','Mild', 'Cool', 'Mild', 'Mild', 'Mild', 'Hot', 'Mild']
Humidity = ['High', 'High', 'High', 'High', 'Normal', 'Normal', 'Normal','High', 'Normal', 'Normal', 'Normal', 'High', 'Normal','High']
Wind = ['False', 'True', 'False', 'False', 'False', 'True', 'True','False', 'False', 'False', 'True', 'True', 'False', 'True']

#Class Label:
Play = ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No','Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No']

#creating labelEncoder
le = preprocessing.LabelEncoder()

#converting string labels into numbers
Outlook_encoded = le.fit_transform(Outlook)
Outlook_name_mapping = dict(zip(le.classes_,le.transform(le.classes_)))
print("Outlook mapping: ",Outlook_name_mapping)

Temperature_encoded = le.fit_transform(Temperature)
Temperature_name_mapping = dict(zip(le.classes_,le.transform(le.classes_)))
print("Temperature mapping: ",Temperature_name_mapping)

Temperature_encoded = le.fit_transform(Temperature)
Temperature_name_mapping = dict(zip(le.classes_,le.transform(le.classes_)))
print("Temperature mapping: ",Temperature_name_mapping)

Humidity_encoded = le.fit_transform(Humidity)
Humidity_name_mapping = dict(zip(le.classes_,le.transform(le.classes_)))
print("Humidity mapping: ",Humidity_name_mapping)

Wind_encoded = le.fit_transform(Wind)
Wind_name_mapping = dict(zip(le.classes_,le.transform(le.classes_)))
print("Wind mapping: ",Wind_name_mapping)

Play_encoded = le.fit_transform(Play)
Play_name_mapping = dict(zip(le.classes_,le.transform(le.classes_)))
print("Play mapping: ",Play_name_mapping)


print("\n\n")
print("Weather:" ,Outlook_encoded)
print("Temerature:" ,Temperature_encoded)
print("Humidity:" ,Humidity_encoded)
print("Wind:" ,Wind_encoded)
print("Play:" ,Play_encoded)

import numpy as np
import torch

inputs = []
output = []

for i in range(len(Play_encoded)):
  temp = [Outlook_encoded[i], Temperature_encoded[i], Humidity_encoded[i], Wind_encoded[i]]
  output.append(Play_encoded[i])
  inputs.append(temp)

inputs = np.array(inputs)
inputs, output

from sklearn.model_selection import train_test_split
df_names = ['Outlook','Temperature','Humidity','Wind']
X_train, X_test, y_train, y_test = train_test_split(inputs, output, train_size = 0.8)

from sklearn import tree
from sklearn import metrics
model = tree.DecisionTreeClassifier(criterion='entropy',max_depth=5)
model.fit(X_train,y_train)
y_predicted = model.predict(X_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_predicted) )
print("Precision:",metrics.precision_score(y_test,y_predicted) )
print("Recall:",metrics.recall_score(y_test,y_predicted) )
print("F1 score:",metrics.f1_score(y_test,y_predicted) )

from sklearn.tree import export_graphviz
export_graphviz(model,out_file='tree_entropy.dot',feature_names=['Outlook','Temperature','Humidity','Wind'],
class_names=['play_no','play_yes'],filled=True)
# Convert to png
from subprocess import call
call(['dot', '-Tpng', 'tree_entropy.dot', '-o', 'tree_entropy.png','-Gdpi=600'])
# Display in python
import matplotlib.pyplot as plt
plt.figure(figsize = (14, 18))
plt.imshow(plt.imread('tree_entropy.png'))
plt.axis('off');
plt.show();

"""(1) What will be the value of Play, if Outlook is ’Rainy’, Temperature is ’Mild’, Humid-
ity =’Normal’, and Wind = ’False’?
"""

model.predict([[1,2,1,0]])

"""(2) What will be the value of Play, if Outlook is ’Sunny’, Temeprature is ’Cool’, Humid-
ity =’High’, and Wind = ’True’?
"""

model.predict([[2,0,0,1]])

"""Task 1: Try the algo on Same Weather dataset - OneHotEncoding of features: and Train test Division 70%-30%"""

import pandas as pd

datasets = pd.DataFrame()
datasets['Outlook'] = ['Rainy', 'Rainy', 'Overcast', 'Sunny', 'Sunny', 'Sunny','Overcast', 'Rainy', 'Rainy', 'Sunny', 'Rainy','Overcast', 'Overcast','Sunny']
datasets['Temperature'] = ['Hot', 'Hot', 'Hot', 'Mild', 'Cool', 'Cool', 'Cool','Mild', 'Cool', 'Mild', 'Mild', 'Mild', 'Hot', 'Mild']
datasets['Humidity'] = ['High', 'High', 'High', 'High', 'Normal', 'Normal', 'Normal','High', 'Normal', 'Normal', 'Normal', 'High', 'Normal','High']
datasets['Wind'] = ['False', 'True', 'False', 'False', 'False', 'True', 'True','False', 'False', 'False', 'True', 'True', 'False', 'True']



dummy_outlook = pd.get_dummies(datasets['Outlook'])
# print(dummy_outlook)
datasets = datasets.drop(['Outlook'], axis=1)
datasets = pd.concat([dummy_outlook, pd.DataFrame(datasets)], axis = 1)

dummy_temp = pd.get_dummies(datasets['Temperature'])
datasets = datasets.drop(['Temperature'], axis=1)
datasets = pd.concat([dummy_temp, datasets], axis = 1)

dummy_hum = pd.get_dummies(datasets['Humidity'])
datasets = datasets.drop(['Humidity'], axis=1)
datasets = pd.concat([dummy_hum, datasets], axis = 1)

dummy_wind = pd.get_dummies(datasets['Wind'])
datasets = datasets.drop(['Wind'], axis=1)
datasets = pd.concat([dummy_wind, datasets], axis = 1)

Play = ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No','Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No']
le = preprocessing.LabelEncoder()
label = le.fit_transform(Play)
# Play_name_mapping = dict(zip(le.classes_,le.transform(le.classes_)))

# datasets, label

from sklearn import tree
from sklearn import metrics

X_train, X_test, y_train, y_test = train_test_split(inputs, output, train_size = 0.7, random_state=8)

model = tree.DecisionTreeClassifier(criterion='entropy',max_depth=5)
model.fit(X_train,y_train)
y_predicted = model.predict(X_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_predicted) )
print("Precision:",metrics.precision_score(y_test,y_predicted) )
print("Recall:",metrics.recall_score(y_test,y_predicted) )
print("F1 score:",metrics.f1_score(y_test,y_predicted) )

from sklearn.tree import export_graphviz
export_graphviz(model,out_file='tree_entropy.dot',feature_names=['Outlook','Temperature','Humidity','Wind'],
class_names=['play_no','play_yes'],filled=True)
# Convert to png
from subprocess import call
call(['dot', '-Tpng', 'tree_entropy.dot', '-o', 'tree_entropy.png','-Gdpi=600'])
# Display in python
import matplotlib.pyplot as plt
plt.figure(figsize = (14, 18))
plt.imshow(plt.imread('tree_entropy.png'))
plt.axis('off');
plt.show();

"""Task 2: Apply algorithm on wine dataset - LabelEncoding of features: and Train test
Division 80%-20%
"""

from sklearn.datasets import load_wine
data = load_wine()
# data.target
# data.data, data.feature_names

le = preprocessing.LabelEncoder()

# len(data.feature_names)
for i in range(len(data.feature_names)):
#converting string labels into numbers
  data.data[ : ,0] = le.fit_transform(data.data[ : ,0])
# Outlook_name_mapping = dict(zip(le.classes_,le.transform(le.classes_)))
# print("Outlook mapping: ",Outlook_name_mapping)

# Temperature_encoded = le.fit_transform(Temperature)
# Temperature_name_mapping = dict(zip(le.classes_,le.transform(le.classes_)))
# print("Temperature mapping: ",Temperature_name_mapping)

# Temperature_encoded = le.fit_transform(Temperature)
# Temperature_name_mapping = dict(zip(le.classes_,le.transform(le.classes_)))
# print("Temperature mapping: ",Temperature_name_mapping)
data.data

from sklearn.model_selection import train_test_split

feature_names = data.feature_names
X = data.data
Y = data.target
X_train, X_test, y_train, y_test = train_test_split(X, Y, train_size=0.8, random_state=8)

model = tree.DecisionTreeClassifier(criterion='entropy',max_depth=5)
model.fit(X_train,y_train)
y_predicted = model.predict(X_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_predicted) )
print("Precision:",metrics.precision_score(y_test,y_predicted, average='micro') )
print("Recall:",metrics.recall_score(y_test,y_predicted, average='micro') )
print("F1 score:",metrics.f1_score(y_test,y_predicted, average='micro') )

from sklearn.tree import export_graphviz
export_graphviz(model,out_file='tree_entropy.dot',feature_names=feature_names,filled=True)
# Convert to png
from subprocess import call
call(['dot', '-Tpng', 'tree_entropy.dot', '-o', 'tree_entropy.png','-Gdpi=600'])
# Display in python
import matplotlib.pyplot as plt
plt.figure(figsize = (14, 18))
plt.imshow(plt.imread('tree_entropy.png'))
plt.axis('off');
plt.show();

"""(6) Train weather dataset using Decision Tree Classifier with max_depth of the tree =2.
Find out accuracy, precision and recall of the trained model.
"""

from sklearn import tree
from sklearn import metrics

X_train, X_test, y_train, y_test = train_test_split(inputs, output, train_size = 0.7, random_state=8)

model = tree.DecisionTreeClassifier(criterion='entropy',max_depth=2)
model.fit(X_train,y_train)
y_predicted = model.predict(X_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_predicted) )
print("Precision:",metrics.precision_score(y_test,y_predicted) )
print("Recall:",metrics.recall_score(y_test,y_predicted) )
print("F1 score:",metrics.f1_score(y_test,y_predicted) )

"""(7) Implement the Decision Tree classifier on Iris dataset and find the ccp_alpha values
associated with the decision tree generated.
"""

from sklearn.datasets import load_iris
iris= load_iris()

X = iris.data
y = iris.target

# X,y

from sklearn.model_selection import train_test_split

data_feature_names = iris.feature_names

X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.8)

model = tree.DecisionTreeClassifier(criterion='entropy') 
model = model.fit(X_train, y_train)

from sklearn import metrics

y_pred = model.predict(X_test)
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))
print("Precision:",metrics.precision_score(y_test,y_pred,average='micro'))
print("Recall:",metrics.recall_score(y_test,y_pred,average='micro'))
print("F1 score:",metrics.f1_score(y_test,y_pred,average='micro'))

from sklearn.tree import export_graphviz
from six import StringIO  
from IPython.display import Image  
import pydotplus

dot_data = StringIO()
export_graphviz(model, out_file=dot_data,  
                filled=True, rounded=True,
                special_characters=True,feature_names = data_feature_names,class_names=['setosa','versicolor','virginica'])
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
graph.write_png('iris.png')
Image(graph.create_png())

path = model.cost_complexity_pruning_path(X_train,y_train)
alphas=path['ccp_alphas']
alphas