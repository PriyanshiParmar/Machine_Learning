# -*- coding: utf-8 -*-
"""ML_Lab4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Uta4K-ZrnRJBt6IM0kQRQOgX6wj_0uPc
"""

import numpy as np
import torch
# Input (temp, rainfall, humidity)
inputs = np.array([[73, 67, 43], [91, 88, 64], [87, 134, 58], [102, 43, 37], 
                   [69, 96, 70], [73, 67, 43], [91, 88, 64], [87, 134, 58], 
                   [102, 43, 37], [69,96, 70], [73, 67, 43], [91, 88, 64],
                   [87, 134, 58], [102, 43, 37], [69, 96,70]], dtype='float32')
# Targets (apples, oranges)
targets = np.array([[56, 70], [81, 101], [119, 133], [22, 37], [103, 119],
                    [56, 70], [81, 101], [119, 133], [22, 37], [103, 119],
                    [56, 70], [81, 101], [119, 133], [22, 37], [103, 119]],
                   dtype='float32')
inputs = torch.from_numpy(inputs)
targets = torch.from_numpy(targets)

from torch.utils.data import TensorDataset, DataLoader
import torch.nn.functional as F
     
# Define dataset
dataset = TensorDataset(inputs,targets)
dataset[0]

import torch.nn as nn
# Define data loader
dataloader = DataLoader(dataset,batch_size=15, shuffle=True)

# Define a model using nn.Linear
# Initializing weights and biases - nn.Linear
model = nn.Linear(in_features=3, out_features=2, bias=True)

# Manipulating the weights and biases - optimizer - optim.SGD
optimizer = torch.optim.SGD(model.parameters(), 0.0001)

# Loss function - torch.nn.functional.mse_loss
loss_fn = F.mse_loss
def fit(num_epochs:int, model, loss_fn, optimizer):
  for epoch in range(num_epochs):
    batch = 0
    for xb,yb in dataloader:
      batch += 1
      pred = model(xb)
      loss = loss_fn(pred, yb)
      optimizer.zero_grad()
      loss.backward()
      optimizer.step()
      print('epoch {} batch {} batch size {} loss {}'.format(epoch,batch,len(xb),loss.item()))

fit(100, model, loss_fn, optimizer)

new_data = torch.Tensor([[87, 134, 58], [102, 43, 37], [69, 96,70]])
new_targets = torch.Tensor([[119, 133], [22, 37], [103, 119]])
pred_new_data = model(new_data)
print("Predict (after training): ",new_targets,"\n", pred_new_data)